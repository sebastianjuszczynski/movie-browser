{"version":3,"sources":["GlobalStyle.js","features/movies/MoviesPage/moviesSlice.js","features/movies/MoviesPage/getPopularMovies.js","features/movies/MoviesPage/moviesSaga.js","store.js","features/movies/MoviesPage/index.js","features/people/PersonPage/index.js","App.js","reportWebVitals.js","index.js","theme.js"],"names":["GlobalStyle","createGlobalStyle","theme","colors","mercury","moviesSlice","createSlice","name","initialState","popularMovies","loading","activePage","reducers","fetchPopularMovies","state","fetchPopularMoviesSuccess","payload","fetchPopularMoviesError","setActivePage","pageNumber","actions","selectPopularMovies","movies","selectLoading","selectActivePage","getPopularMovies","a","page","store","getState","axios","get","then","data","response","catch","console","log","fetchExampleTasksHandler","watchFetchPopularMovies","delay","call","put","results","alert","takeEvery","type","SagaMiddleware","createSagaMiddleware","configureStore","reducer","moviesReducer","middleware","run","MoviesPage","useSelector","isLoading","dispatch","useDispatch","useEffect","map","movie","title","id","onClick","PersonPage","App","to","path","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","Bblack","waterLoo","tan","cornsilk","white","document","getElementById"],"mappings":"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","file":"static/js/main.ecd832c3.chunk.js","sourcesContent":["import { createGlobalStyle } from \"styled-components\";\r\n\r\n\r\nexport const GlobalStyle = createGlobalStyle`\r\n    html {\r\n        box-sizing:border-box;\r\n    };\r\n    *, ::after, ::before {\r\n        box-sizing: inherit;\r\n    };\r\n    body {\r\n        background: ${({ theme }) => theme.colors.mercury};\r\n        font-family: \"Poppins\", sans-serif;\r\n    };\r\n    #root {\r\n        min-height: 100vh;\r\n    }\r\n`;","import { createSlice } from \"@reduxjs/toolkit\";\r\nconst moviesSlice = createSlice({\r\n    name: \"movies\",\r\n    initialState: {\r\n        popularMovies: [],\r\n        loading: false,\r\n        activePage: 1,\r\n    },\r\n    reducers: {\r\n        fetchPopularMovies: state => {\r\n            state.loading = true;\r\n        },\r\n        fetchPopularMoviesSuccess: (state, { payload: popularMovies }) => {\r\n            state.popularMovies = popularMovies;\r\n            state.loading = false;\r\n        },\r\n        fetchPopularMoviesError: state => {\r\n            state.loading = false;\r\n        },\r\n        setActivePage: (state, { payload: pageNumber }) => {\r\n            state.activePage = pageNumber;\r\n        },\r\n    },\r\n});\r\n\r\nexport const {\r\n    fetchPopularMovies,\r\n    fetchPopularMoviesSuccess,\r\n    fetchPopularMoviesError,\r\n    setActivePage,\r\n} = moviesSlice.actions;\r\nexport const selectPopularMovies = state => state.movies.popularMovies;\r\nexport const selectLoading = state => state.movies.loading;\r\nexport const selectActivePage = state => state.movies.activePage;\r\n\r\nexport default moviesSlice.reducer;","import axios from \"axios\";\r\nimport store from \"./../../../store\";\r\n\r\nexport const getPopularMovies = async () => {\r\n    const page = store.getState().movies.activePage;\r\n    let response;\r\n    await axios.get(`https://api.themoviedb.org/3/movie/popular?api_key=db28f87903ed5f61125cde9d85f339b2&language=en-US&page=${page}`)\r\n        .then(data => response = data)\r\n        .catch(() => console.log(\"error\"))\r\n    return response.data;\r\n};","import { takeEvery, call, put, delay } from \"redux-saga/effects\";\r\nimport { getPopularMovies } from \"./getPopularMovies\";\r\nimport {\r\n    fetchPopularMovies,\r\n    fetchPopularMoviesError,\r\n    fetchPopularMoviesSuccess\r\n} from \"./moviesSlice\";\r\n\r\nfunction* fetchExampleTasksHandler() {\r\n    try {\r\n        yield delay(1000);\r\n        const popularMovies = yield call(getPopularMovies);\r\n        yield put(fetchPopularMoviesSuccess(popularMovies.results));\r\n    } catch (error) {\r\n        yield put(fetchPopularMoviesError());\r\n        yield call(alert, \"Something went wrong...\");\r\n    }\r\n};\r\n\r\nexport function* watchFetchPopularMovies() {\r\n    yield takeEvery(fetchPopularMovies.type, fetchExampleTasksHandler);\r\n}","import { configureStore } from \"@reduxjs/toolkit\";\r\nimport moviesReducer from \"./features/movies/MoviesPage/moviesSlice\";\r\nimport createSagaMiddleware from \"redux-saga\";\r\nimport { watchFetchPopularMovies } from \"./features/movies/MoviesPage/moviesSaga\";\r\n\r\nconst SagaMiddleware = createSagaMiddleware();\r\n\r\nconst store = configureStore({\r\n    reducer: {\r\n        movies: moviesReducer,\r\n    },\r\n    middleware: [SagaMiddleware],\r\n});\r\nSagaMiddleware.run(watchFetchPopularMovies);\r\n\r\nexport default store;","import React, { useEffect } from \"react\";\r\nimport { useDispatch, useSelector } from \"react-redux\";\r\nimport {\r\n    fetchPopularMovies,\r\n    selectPopularMovies,\r\n    selectLoading,\r\n    selectActivePage,\r\n    setActivePage\r\n} from \"./moviesSlice\";\r\n\r\nconst MoviesPage = () => {\r\n    const popularMovies = useSelector(selectPopularMovies);\r\n    const isLoading =useSelector(selectLoading);\r\n    const activePage = useSelector(selectActivePage);\r\n    const dispatch = useDispatch();\r\n\r\n    useEffect(() => {\r\n        dispatch(fetchPopularMovies());\r\n    }, [activePage])\r\n\r\n    return (\r\n        <div>\r\n            {isLoading ? \"loading\" : popularMovies.map(movie => \r\n                <p key={movie.id}>{movie.title}</p>)}\r\n            <button\r\n                onClick={() => dispatch(setActivePage(activePage + 1))}\r\n            />\r\n        </div>\r\n    );\r\n};\r\n\r\nexport default MoviesPage;","import React from \"react\";\r\n\r\nconst PersonPage = () => {\r\n    return (\r\n        <p>Person Page</p>\r\n    );\r\n};\r\n\r\nexport default PersonPage;","import React from \"react\";\nimport { HashRouter, Switch, Route, Redirect, NavLink } from \"react-router-dom\";\nimport MoviesPage from \"./features/movies/MoviesPage\";\nimport PeoplePage from \"./features/people/PersonPage\";\n\nfunction App() {\n  return (\n    <HashRouter>\n      <nav>\n        <ul>\n          <li>\n            <NavLink to=\"/movies\">Movies</NavLink>\n          </li>\n          <li>\n            <NavLink to=\"/people\">People</NavLink>\n          </li>\n        </ul>\n        <Switch>\n          <Route path=\"/movies\">\n            <MoviesPage />\n          </Route>\n          <Route path=\"/people\">\n            <PeoplePage />\n          </Route>\n          <Route path=\"/\">\n            <Redirect to=\"/movies\" />\n          </Route>\n        </Switch>\n      </nav>\n    </HashRouter>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport { GlobalStyle } from \"./GlobalStyle\";\nimport { ThemeProvider } from \"styled-components\";\nimport { theme } from \"./theme\";\nimport { Provider } from \"react-redux\";\nimport store from \"./store\";\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <ThemeProvider theme={theme}>\n        <GlobalStyle />\n        <App />\n      </ThemeProvider>\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n","export const theme = {\r\n    colors: {\r\n        mercury: \"#E5E5E5\",\r\n        Bblack: \"#000000\",\r\n        waterLoo: \"#7E839A\",\r\n        tan: \"#F5F5FA\",\r\n        cornsilk: \"#E4E6F0\",\r\n        white: \"#FFFFFF\",\r\n    },\r\n};"],"sourceRoot":""}